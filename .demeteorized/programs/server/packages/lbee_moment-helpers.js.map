{"version":3,"sources":["lbee:moment-helpers/common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,a;;AAEA,+C;AACA,kB;;AAEA,wB;AACA,Y;;AAEA,6E;AACA,2C;;AAEA,kF;AACA,4C;;AAEA,2F;AACA,wC;AACA,4B;AACA,8C;AACA,M;;AAEA,kB;AACA,yC;AACA,mC;AACA,6B;AACA,2B;AACA,G;;;AAGA,oB;AACA,e;AACA,0B;AACA,4D;AACA,2B;AACA,6C;AACA,I;;AAEA,+B;AACA,kB;AACA,gE;AACA,mC;AACA,2B;AACA,iB;AACA,sC;AACA,mB;AACA,uB;AACA,uC;AACA,6C;AACA,K;AACA,I;;;AAGA,yE;AACA,uC;AACA,oC;AACA,I;;AAEA,oB;AACA,6B;;AAEA,qC;AACA,4C;AACA,uB;;AAEA,sC;AACA,6B;AACA,wB;AACA,uB;AACA,K;AACA,I;;AAEA,mE;AACA,uD;AACA,+C;AACA,8D;AACA,iE;AACA,0B;AACA,wB;AACA,mB;AACA,qB;AACA,uB;AACA,O;;AAEA,kE;AACA,kB;AACA,wB;AACA,K;;AAEA,0D;AACA,mC;AACA,yC;;AAEA,4C;AACA,8B;AACA,kC;AACA,K;;AAEA,sB;AACA,iB;AACA,I;;AAEA,8C;AACA,8B;AACA,mE;AACA,O;AACA,e;AACA,0D;AACA,+B;AACA,uE;AACA,mB;AACA,iC;AACA,2D;AACA,2B;AACA,uD;AACA,6C;;AAEA,2E;AACA,oC;AACA,0B;AACA,uE;AACA,2E;AACA,U;AACA,c;AACA,yC;AACA,O;AACA,2B;AACA,sB;AACA,O;AACA,K;;AAEA,mC;AACA,yC;AACA,oB;AACA,iD;AACA,kD;AACA,wB;AACA,c;AACA,mD;AACA,O;AACA,K;;AAEA,kB;AACA,I;;AAEA,E;;;AAGA,mC;AACA,2B;AACA,2B;AACA,yB;AACA,Q;AACA,yE;AACA,C","file":"/packages/lbee_moment-helpers.js","sourcesContent":["\"use strict\";\n\nvar momentHelpers = function momentHelpers () {\n  var self = this;\n\n  if (Meteor.isClient) {\n    //locale\n\n    //create a new reactiveVar that holds the moment helper context of locale\n    self.currentLocale = new ReactiveVar();\n\n    //when creating the moment helper context, set the locale to the moment locale\n    self.currentLocale.set(moment.locale());\n\n    //expose a utility to set the locale, updating moment but also updating reactive locale\n    self.setLocale = function (locale) {\n      moment.locale(locale);\n      self.currentLocale.set(moment.locale());\n    };\n\n    //reactive now\n    self.now = new ReactiveVar(moment());\n    Meteor.setInterval(function() {\n      self.now.set(moment());\n    }, 1000);//every second\n  }\n\n\n  //logging messages\n  self._msg = {\n    dateNotValidReturnNow:\n      'valid date not provided, sending new moment instead',\n    dateNotValidReturnNull:\n      'valid date not provided, sending null'\n  };\n\n  //initate the default options\n  self.options = {\n    //if a helper is called and no date given, create one as now\n    returnNowIfDateNotGiven: false,\n    //extra console logging\n    debug: false,\n    //initial library of format tokens\n    formatTokens: {\n      'default': 'LLL',\n      // defaults to locale date format\n      // Month name, day of month, year, time\n    }\n  };\n\n\n  //configuration function, merges the defaults with the options provided\n  self.configure = function (options) {\n    _.extend(self.options, options);\n  };\n\n  //logging function\n  self.log = function (log) {\n\n    //delete the currently stored log\n    //this was enabled to assit with logging\n    delete self.logged;\n\n    //if debugging is enabled, log it!\n    if (self.options.debug) {\n      self.logged = log;\n      console.log(log);\n    }\n  };\n\n  //used for moFormat, helps to get a format token eg. 'YYYY-MM-DD'\n  self._getToken = function getToken (token, aMoment) {\n    check(token, Match.Optional(String, null));\n    var tokenLibrary = _.defaults(self.options.formatTokens, {\n      //these tokens will always be available (unless overridden)\n      'dayOfWeek': 'dddd',\n      'dayOfMonth': 'D',\n      'month': 'M',\n      'year': 'YYYY',\n      'time': 'h:mm a',\n    });\n\n    //if no token provided, use the default from the token library\n    if (! token) {\n      token = 'default';\n    }\n\n    //see if the token is a reference to the token library\n    //if not keep what was provided\n    token = tokenLibrary[token] || token;\n\n    //check if token is a function & process\n    if (_.isFunction(token)) {\n      token = token.call(aMoment);\n    }\n\n    //return the token\n    return token;\n  };\n\n  self._getMoment = function getMoment (obj) {\n    check(obj, Match.Optional(\n      Match.OneOf(Match.Where(moment.isMoment), Date, String, null)\n    ));\n    var result;\n    //goal is to get a moment object from what is provided\n    if (moment.isMoment(obj)) {\n      //if a moment is provided, return that moment, no questions asked\n      result = obj;\n    } else if ( _.isDate(obj) ) {\n      //if a date is provided, convert to moment and return\n      result = moment(obj);\n    } else if ( _.isString(obj) && (obj.length > 1) ) {\n      //attempt to get a date from the string\n\n      //if '|' is found, separate and use the RHS as the input format token\n      if (obj.indexOf('|') !== -1) {\n        var date = moment(\n          obj.substring(0, obj.indexOf('|')), //input string LHS of '|'\n          obj.substring(obj.indexOf('|') + 1) //input format, RHS after '|'\n        );\n      } else {\n        var date = moment(new Date(obj));\n      }\n      if (date.isValid()) {\n        result = date;\n      }\n    }\n\n    //could not get a moment object\n    //work out what to return if anything\n    if (! result ) {\n      if (self.options.returnNowIfDateNotGiven) {\n        self.log(self._msg.dateNotValidReturnNow);\n        return moment();\n      } else {\n        self.log(self._msg.dateNotValidReturnNull);\n      }\n    }\n\n    return result;\n  };\n\n};\n\n\nif (typeof moment != \"undefined\") {\n  /* jshint ignore:start */\n  mo = new momentHelpers();\n  /* jshint ignore:end */\n} else {\n  throw new Error('lbee:moment-helpers, no Moment package is installed');\n}\n"]}