{"version":3,"sources":["tmeasday:publish-counts/publish-counts.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,sB;AACA,c;AACA,0D;AACA,4B;AACA,e;AACA,4B;;AAEA,4B;;AAEA,iC;AACA,0C;AACA,+B;AACA,+B;AACA,O;AACA,8C;AACA,gD;AACA,+B;AACA,sC;AACA,O;AACA,K;;;AAGA,uC;AACA,iI;;AAEA,gB;AACA,oB;;AAEA,0D;AACA,2D;AACA,mB;AACA,kE;;AAEA,kB;AACA,qB;AACA,mC;AACA,sB;AACA,kC;AACA,mB;;AAEA,qC;AACA,4B;AACA,gB;AACA,qB;AACA,S;;AAEA,0B;AACA,uD;AACA,Q;AACA,qC;AACA,sB;AACA,kC;AACA,mB;;AAEA,mC;AACA,0B;AACA,gB;AACA,qB;AACA,S;AACA,qD;AACA,O;AACA,M;;AAEA,kB;AACA,gD;AACA,sB;AACA,kC;AACA,mB;;AAEA,qC;AACA,mC;AACA,0B;AACA,S;;AAEA,qD;AACA,Q;AACA,K;;AAEA,mB;AACA,0D;AACA,2B;AACA,qB;AACA,K;;AAEA,6B;AACA,gD;;AAEA,gB;AACA,iD;;AAEA,yB;AACA,mB;;AAEA,yB;;AAEA,4B;AACA,iB;AACA,sB;AACA,O;;AAEA,Y;AACA,wB;AACA,qB;AACA,wB;AACA,6B;AACA,S;AACA,O;AACA,M;AACA,I;AACA,uB;AACA,gC;AACA,C;;AAEA,sB;AACA,0C;;AAEA,+B;AACA,mC;AACA,qC;AACA,I;;AAEA,2B;AACA,oF;AACA,8B;AACA,O;AACA,G;AACA,C","file":"/packages/tmeasday_publish-counts.js","sourcesContent":["if (Meteor.isServer) {\n  Counts = {};\n  Counts.publish = function(self, name, cursor, options) {\n    var initializing = true;\n    var handle;\n    options = options || {};\n\n    var extraField, countFn;\n\n    if (options.countFromField) {\n      extraField = options.countFromField;\n      countFn = function(doc) {\n        return doc[extraField];\n      }\n    } else if (options.countFromFieldLength) {\n      extraField = options.countFromFieldLength;\n      countFn = function(doc) {\n        return doc[extraField].length;\n      }\n    }\n\n\n    if (countFn && options.nonReactive)\n      throw new Error(\"options.nonReactive is not yet supported with options.countFromFieldLength or options.countFromFieldSum\");\n\n    if (countFn)\n      var prev = {};\n\n    // ensure the cursor doesn't fetch more than it has to\n    cursor._cursorDescription.options.fields = {_id: true};\n    if (extraField)\n      cursor._cursorDescription.options.fields[extraField] = true;\n\n    var count = 0;\n    var observers = {\n      added: function(id, fields) {\n        if (countFn) {\n          if (!fields[extraField])\n            return;\n\n          prev[id] = countFn(fields);\n          count += prev[id];\n        } else {\n          count += 1;\n        }\n\n        if (!initializing)\n          self.changed('counts', name, {count: count});\n      },\n      removed: function(id, fields) {\n        if (countFn) {\n          if (!fields[extraField])\n            return;\n\n          count -= countFn(fields);\n          delete prev[id];\n        } else {\n          count -= 1;\n        }\n        self.changed('counts', name, {count: count});\n      }\n    };\n\n    if (countFn) {\n      observers.changed = function(id, fields) {\n        if (countFn) {\n          if (!fields[extraField])\n            return;\n\n          var next = countFn(fields);\n          count += next - prev[id];\n          prev[id] = next;\n        }\n\n        self.changed('counts', name, {count: count});\n      };\n    }\n\n    if (!countFn) {\n      self.added('counts', name, {count: cursor.count()});\n      if (!options.noReady)\n        self.ready();\n    }\n\n    if (!options.nonReactive)\n      handle = cursor.observeChanges(observers);\n\n    if (countFn)\n      self.added('counts', name, {count: count});\n\n    if (!options.noReady)\n      self.ready();\n\n    initializing = false;\n\n    self.onStop(function() {\n      if (handle)\n        handle.stop();\n    });\n\n    return {\n      stop: function() {\n        if (handle) {\n          handle.stop();\n          handle = undefined;\n        }\n      }\n    };\n  };\n  // back compatibility\n  publishCount = Counts.publish;\n}\n\nif (Meteor.isClient) {\n  Counts = new Mongo.Collection('counts');\n\n  Counts.get = function(name) {\n    var count = this.findOne(name);\n    return count && count.count || 0;\n  };\n\n  if (Package.templating) {\n    Package.templating.Template.registerHelper('getPublishedCount', function(name) {\n      return Counts.get(name);\n    });\n  }\n}"]}